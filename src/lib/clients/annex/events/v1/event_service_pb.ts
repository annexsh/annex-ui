// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file annex/events/v1/event_service.proto (package annex.events.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Event } from "./event_pb.js";

/**
 * @generated from message annex.events.v1.StreamTestExecutionEventsRequest
 */
export class StreamTestExecutionEventsRequest extends Message<StreamTestExecutionEventsRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  constructor(data?: PartialMessage<StreamTestExecutionEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.events.v1.StreamTestExecutionEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamTestExecutionEventsRequest {
    return new StreamTestExecutionEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamTestExecutionEventsRequest {
    return new StreamTestExecutionEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamTestExecutionEventsRequest {
    return new StreamTestExecutionEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamTestExecutionEventsRequest | PlainMessage<StreamTestExecutionEventsRequest> | undefined, b: StreamTestExecutionEventsRequest | PlainMessage<StreamTestExecutionEventsRequest> | undefined): boolean {
    return proto3.util.equals(StreamTestExecutionEventsRequest, a, b);
  }
}

/**
 * @generated from message annex.events.v1.StreamTestExecutionEventsResponse
 */
export class StreamTestExecutionEventsResponse extends Message<StreamTestExecutionEventsResponse> {
  /**
   * @generated from field: annex.events.v1.Event event = 1;
   */
  event?: Event;

  constructor(data?: PartialMessage<StreamTestExecutionEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.events.v1.StreamTestExecutionEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: Event },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamTestExecutionEventsResponse {
    return new StreamTestExecutionEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamTestExecutionEventsResponse {
    return new StreamTestExecutionEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamTestExecutionEventsResponse {
    return new StreamTestExecutionEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamTestExecutionEventsResponse | PlainMessage<StreamTestExecutionEventsResponse> | undefined, b: StreamTestExecutionEventsResponse | PlainMessage<StreamTestExecutionEventsResponse> | undefined): boolean {
    return proto3.util.equals(StreamTestExecutionEventsResponse, a, b);
  }
}

