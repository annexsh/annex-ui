// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file annex/tests/v1/test_service.proto (package annex.tests.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { CaseExecution, Group, Log, Payload, Test, TestDefinition, TestExecution } from "./test_pb.js";

/**
 * @generated from message annex.tests.v1.RegisterContextRequest
 */
export class RegisterContextRequest extends Message<RegisterContextRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  constructor(data?: PartialMessage<RegisterContextRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.RegisterContextRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterContextRequest {
    return new RegisterContextRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterContextRequest {
    return new RegisterContextRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterContextRequest {
    return new RegisterContextRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterContextRequest | PlainMessage<RegisterContextRequest> | undefined, b: RegisterContextRequest | PlainMessage<RegisterContextRequest> | undefined): boolean {
    return proto3.util.equals(RegisterContextRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.RegisterContextResponse
 */
export class RegisterContextResponse extends Message<RegisterContextResponse> {
  constructor(data?: PartialMessage<RegisterContextResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.RegisterContextResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterContextResponse {
    return new RegisterContextResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterContextResponse {
    return new RegisterContextResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterContextResponse {
    return new RegisterContextResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterContextResponse | PlainMessage<RegisterContextResponse> | undefined, b: RegisterContextResponse | PlainMessage<RegisterContextResponse> | undefined): boolean {
    return proto3.util.equals(RegisterContextResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListContextsRequest
 */
export class ListContextsRequest extends Message<ListContextsRequest> {
  constructor(data?: PartialMessage<ListContextsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListContextsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContextsRequest {
    return new ListContextsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContextsRequest {
    return new ListContextsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContextsRequest {
    return new ListContextsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListContextsRequest | PlainMessage<ListContextsRequest> | undefined, b: ListContextsRequest | PlainMessage<ListContextsRequest> | undefined): boolean {
    return proto3.util.equals(ListContextsRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListContextsResponse
 */
export class ListContextsResponse extends Message<ListContextsResponse> {
  /**
   * @generated from field: repeated string contexts = 1;
   */
  contexts: string[] = [];

  constructor(data?: PartialMessage<ListContextsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListContextsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contexts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContextsResponse {
    return new ListContextsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContextsResponse {
    return new ListContextsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContextsResponse {
    return new ListContextsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListContextsResponse | PlainMessage<ListContextsResponse> | undefined, b: ListContextsResponse | PlainMessage<ListContextsResponse> | undefined): boolean {
    return proto3.util.equals(ListContextsResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.RegisterGroupRequest
 */
export class RegisterGroupRequest extends Message<RegisterGroupRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<RegisterGroupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.RegisterGroupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterGroupRequest {
    return new RegisterGroupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterGroupRequest {
    return new RegisterGroupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterGroupRequest {
    return new RegisterGroupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterGroupRequest | PlainMessage<RegisterGroupRequest> | undefined, b: RegisterGroupRequest | PlainMessage<RegisterGroupRequest> | undefined): boolean {
    return proto3.util.equals(RegisterGroupRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.RegisterGroupResponse
 */
export class RegisterGroupResponse extends Message<RegisterGroupResponse> {
  constructor(data?: PartialMessage<RegisterGroupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.RegisterGroupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterGroupResponse {
    return new RegisterGroupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterGroupResponse {
    return new RegisterGroupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterGroupResponse {
    return new RegisterGroupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterGroupResponse | PlainMessage<RegisterGroupResponse> | undefined, b: RegisterGroupResponse | PlainMessage<RegisterGroupResponse> | undefined): boolean {
    return proto3.util.equals(RegisterGroupResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListGroupsRequest
 */
export class ListGroupsRequest extends Message<ListGroupsRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  constructor(data?: PartialMessage<ListGroupsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListGroupsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGroupsRequest {
    return new ListGroupsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGroupsRequest {
    return new ListGroupsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGroupsRequest {
    return new ListGroupsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListGroupsRequest | PlainMessage<ListGroupsRequest> | undefined, b: ListGroupsRequest | PlainMessage<ListGroupsRequest> | undefined): boolean {
    return proto3.util.equals(ListGroupsRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListGroupsResponse
 */
export class ListGroupsResponse extends Message<ListGroupsResponse> {
  /**
   * @generated from field: repeated annex.tests.v1.Group groups = 1;
   */
  groups: Group[] = [];

  constructor(data?: PartialMessage<ListGroupsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListGroupsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: Group, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListGroupsResponse {
    return new ListGroupsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListGroupsResponse {
    return new ListGroupsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListGroupsResponse {
    return new ListGroupsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListGroupsResponse | PlainMessage<ListGroupsResponse> | undefined, b: ListGroupsResponse | PlainMessage<ListGroupsResponse> | undefined): boolean {
    return proto3.util.equals(ListGroupsResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.RegisterTestsRequest
 */
export class RegisterTestsRequest extends Message<RegisterTestsRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string group = 2;
   */
  group = "";

  /**
   * @generated from field: repeated annex.tests.v1.TestDefinition definitions = 4;
   */
  definitions: TestDefinition[] = [];

  constructor(data?: PartialMessage<RegisterTestsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.RegisterTestsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "definitions", kind: "message", T: TestDefinition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterTestsRequest {
    return new RegisterTestsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterTestsRequest {
    return new RegisterTestsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterTestsRequest {
    return new RegisterTestsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterTestsRequest | PlainMessage<RegisterTestsRequest> | undefined, b: RegisterTestsRequest | PlainMessage<RegisterTestsRequest> | undefined): boolean {
    return proto3.util.equals(RegisterTestsRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.RegisterTestsResponse
 */
export class RegisterTestsResponse extends Message<RegisterTestsResponse> {
  /**
   * @generated from field: repeated annex.tests.v1.Test tests = 1;
   */
  tests: Test[] = [];

  constructor(data?: PartialMessage<RegisterTestsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.RegisterTestsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tests", kind: "message", T: Test, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterTestsResponse {
    return new RegisterTestsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterTestsResponse {
    return new RegisterTestsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterTestsResponse {
    return new RegisterTestsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterTestsResponse | PlainMessage<RegisterTestsResponse> | undefined, b: RegisterTestsResponse | PlainMessage<RegisterTestsResponse> | undefined): boolean {
    return proto3.util.equals(RegisterTestsResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListTestsRequest
 */
export class ListTestsRequest extends Message<ListTestsRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string group = 2;
   */
  group = "";

  /**
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string next_page_token = 4;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTestsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListTestsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestsRequest {
    return new ListTestsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestsRequest {
    return new ListTestsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestsRequest {
    return new ListTestsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestsRequest | PlainMessage<ListTestsRequest> | undefined, b: ListTestsRequest | PlainMessage<ListTestsRequest> | undefined): boolean {
    return proto3.util.equals(ListTestsRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListTestsResponse
 */
export class ListTestsResponse extends Message<ListTestsResponse> {
  /**
   * @generated from field: repeated annex.tests.v1.Test tests = 1;
   */
  tests: Test[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTestsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListTestsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tests", kind: "message", T: Test, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestsResponse {
    return new ListTestsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestsResponse {
    return new ListTestsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestsResponse {
    return new ListTestsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestsResponse | PlainMessage<ListTestsResponse> | undefined, b: ListTestsResponse | PlainMessage<ListTestsResponse> | undefined): boolean {
    return proto3.util.equals(ListTestsResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.GetTestDefaultInputRequest
 */
export class GetTestDefaultInputRequest extends Message<GetTestDefaultInputRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_id = 2;
   */
  testId = "";

  constructor(data?: PartialMessage<GetTestDefaultInputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.GetTestDefaultInputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTestDefaultInputRequest {
    return new GetTestDefaultInputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTestDefaultInputRequest {
    return new GetTestDefaultInputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTestDefaultInputRequest {
    return new GetTestDefaultInputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTestDefaultInputRequest | PlainMessage<GetTestDefaultInputRequest> | undefined, b: GetTestDefaultInputRequest | PlainMessage<GetTestDefaultInputRequest> | undefined): boolean {
    return proto3.util.equals(GetTestDefaultInputRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.GetTestDefaultInputResponse
 */
export class GetTestDefaultInputResponse extends Message<GetTestDefaultInputResponse> {
  /**
   * @generated from field: string default_input = 1;
   */
  defaultInput = "";

  constructor(data?: PartialMessage<GetTestDefaultInputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.GetTestDefaultInputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default_input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTestDefaultInputResponse {
    return new GetTestDefaultInputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTestDefaultInputResponse {
    return new GetTestDefaultInputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTestDefaultInputResponse {
    return new GetTestDefaultInputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTestDefaultInputResponse | PlainMessage<GetTestDefaultInputResponse> | undefined, b: GetTestDefaultInputResponse | PlainMessage<GetTestDefaultInputResponse> | undefined): boolean {
    return proto3.util.equals(GetTestDefaultInputResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ExecuteTestRequest
 */
export class ExecuteTestRequest extends Message<ExecuteTestRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_id = 2;
   */
  testId = "";

  /**
   * @generated from field: optional annex.tests.v1.Payload input = 3;
   */
  input?: Payload;

  constructor(data?: PartialMessage<ExecuteTestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ExecuteTestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "input", kind: "message", T: Payload, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteTestRequest {
    return new ExecuteTestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteTestRequest {
    return new ExecuteTestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteTestRequest {
    return new ExecuteTestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteTestRequest | PlainMessage<ExecuteTestRequest> | undefined, b: ExecuteTestRequest | PlainMessage<ExecuteTestRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteTestRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ExecuteTestResponse
 */
export class ExecuteTestResponse extends Message<ExecuteTestResponse> {
  /**
   * @generated from field: annex.tests.v1.TestExecution test_execution = 1;
   */
  testExecution?: TestExecution;

  constructor(data?: PartialMessage<ExecuteTestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ExecuteTestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_execution", kind: "message", T: TestExecution },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteTestResponse {
    return new ExecuteTestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteTestResponse {
    return new ExecuteTestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteTestResponse {
    return new ExecuteTestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteTestResponse | PlainMessage<ExecuteTestResponse> | undefined, b: ExecuteTestResponse | PlainMessage<ExecuteTestResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteTestResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.RetryTestExecutionRequest
 */
export class RetryTestExecutionRequest extends Message<RetryTestExecutionRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  constructor(data?: PartialMessage<RetryTestExecutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.RetryTestExecutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetryTestExecutionRequest {
    return new RetryTestExecutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetryTestExecutionRequest {
    return new RetryTestExecutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetryTestExecutionRequest {
    return new RetryTestExecutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RetryTestExecutionRequest | PlainMessage<RetryTestExecutionRequest> | undefined, b: RetryTestExecutionRequest | PlainMessage<RetryTestExecutionRequest> | undefined): boolean {
    return proto3.util.equals(RetryTestExecutionRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.RetryTestExecutionResponse
 */
export class RetryTestExecutionResponse extends Message<RetryTestExecutionResponse> {
  /**
   * @generated from field: annex.tests.v1.TestExecution test_execution = 1;
   */
  testExecution?: TestExecution;

  constructor(data?: PartialMessage<RetryTestExecutionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.RetryTestExecutionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_execution", kind: "message", T: TestExecution },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetryTestExecutionResponse {
    return new RetryTestExecutionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetryTestExecutionResponse {
    return new RetryTestExecutionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetryTestExecutionResponse {
    return new RetryTestExecutionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RetryTestExecutionResponse | PlainMessage<RetryTestExecutionResponse> | undefined, b: RetryTestExecutionResponse | PlainMessage<RetryTestExecutionResponse> | undefined): boolean {
    return proto3.util.equals(RetryTestExecutionResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.GetTestExecutionRequest
 */
export class GetTestExecutionRequest extends Message<GetTestExecutionRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  constructor(data?: PartialMessage<GetTestExecutionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.GetTestExecutionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTestExecutionRequest {
    return new GetTestExecutionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTestExecutionRequest {
    return new GetTestExecutionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTestExecutionRequest {
    return new GetTestExecutionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTestExecutionRequest | PlainMessage<GetTestExecutionRequest> | undefined, b: GetTestExecutionRequest | PlainMessage<GetTestExecutionRequest> | undefined): boolean {
    return proto3.util.equals(GetTestExecutionRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.GetTestExecutionResponse
 */
export class GetTestExecutionResponse extends Message<GetTestExecutionResponse> {
  /**
   * @generated from field: annex.tests.v1.TestExecution test_execution = 1;
   */
  testExecution?: TestExecution;

  /**
   * @generated from field: optional annex.tests.v1.Payload input = 2;
   */
  input?: Payload;

  constructor(data?: PartialMessage<GetTestExecutionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.GetTestExecutionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_execution", kind: "message", T: TestExecution },
    { no: 2, name: "input", kind: "message", T: Payload, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTestExecutionResponse {
    return new GetTestExecutionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTestExecutionResponse {
    return new GetTestExecutionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTestExecutionResponse {
    return new GetTestExecutionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTestExecutionResponse | PlainMessage<GetTestExecutionResponse> | undefined, b: GetTestExecutionResponse | PlainMessage<GetTestExecutionResponse> | undefined): boolean {
    return proto3.util.equals(GetTestExecutionResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListTestExecutionsRequest
 */
export class ListTestExecutionsRequest extends Message<ListTestExecutionsRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_id = 2;
   */
  testId = "";

  /**
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string next_page_token = 4;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTestExecutionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListTestExecutionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestExecutionsRequest {
    return new ListTestExecutionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestExecutionsRequest {
    return new ListTestExecutionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestExecutionsRequest {
    return new ListTestExecutionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestExecutionsRequest | PlainMessage<ListTestExecutionsRequest> | undefined, b: ListTestExecutionsRequest | PlainMessage<ListTestExecutionsRequest> | undefined): boolean {
    return proto3.util.equals(ListTestExecutionsRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListTestExecutionsResponse
 */
export class ListTestExecutionsResponse extends Message<ListTestExecutionsResponse> {
  /**
   * @generated from field: repeated annex.tests.v1.TestExecution test_executions = 1;
   */
  testExecutions: TestExecution[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTestExecutionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListTestExecutionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test_executions", kind: "message", T: TestExecution, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestExecutionsResponse {
    return new ListTestExecutionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestExecutionsResponse {
    return new ListTestExecutionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestExecutionsResponse {
    return new ListTestExecutionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestExecutionsResponse | PlainMessage<ListTestExecutionsResponse> | undefined, b: ListTestExecutionsResponse | PlainMessage<ListTestExecutionsResponse> | undefined): boolean {
    return proto3.util.equals(ListTestExecutionsResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListTestCaseExecutionsRequest
 */
export class ListTestCaseExecutionsRequest extends Message<ListTestCaseExecutionsRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  constructor(data?: PartialMessage<ListTestCaseExecutionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListTestCaseExecutionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestCaseExecutionsRequest {
    return new ListTestCaseExecutionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestCaseExecutionsRequest {
    return new ListTestCaseExecutionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestCaseExecutionsRequest {
    return new ListTestCaseExecutionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestCaseExecutionsRequest | PlainMessage<ListTestCaseExecutionsRequest> | undefined, b: ListTestCaseExecutionsRequest | PlainMessage<ListTestCaseExecutionsRequest> | undefined): boolean {
    return proto3.util.equals(ListTestCaseExecutionsRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListTestCaseExecutionsResponse
 */
export class ListTestCaseExecutionsResponse extends Message<ListTestCaseExecutionsResponse> {
  /**
   * @generated from field: repeated annex.tests.v1.CaseExecution case_executions = 1;
   */
  caseExecutions: CaseExecution[] = [];

  constructor(data?: PartialMessage<ListTestCaseExecutionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListTestCaseExecutionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "case_executions", kind: "message", T: CaseExecution, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestCaseExecutionsResponse {
    return new ListTestCaseExecutionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestCaseExecutionsResponse {
    return new ListTestCaseExecutionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestCaseExecutionsResponse {
    return new ListTestCaseExecutionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestCaseExecutionsResponse | PlainMessage<ListTestCaseExecutionsResponse> | undefined, b: ListTestCaseExecutionsResponse | PlainMessage<ListTestCaseExecutionsResponse> | undefined): boolean {
    return proto3.util.equals(ListTestCaseExecutionsResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckTestExecutionStartedRequest
 */
export class AckTestExecutionStartedRequest extends Message<AckTestExecutionStartedRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  constructor(data?: PartialMessage<AckTestExecutionStartedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckTestExecutionStartedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckTestExecutionStartedRequest {
    return new AckTestExecutionStartedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckTestExecutionStartedRequest {
    return new AckTestExecutionStartedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckTestExecutionStartedRequest {
    return new AckTestExecutionStartedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AckTestExecutionStartedRequest | PlainMessage<AckTestExecutionStartedRequest> | undefined, b: AckTestExecutionStartedRequest | PlainMessage<AckTestExecutionStartedRequest> | undefined): boolean {
    return proto3.util.equals(AckTestExecutionStartedRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckTestExecutionStartedResponse
 */
export class AckTestExecutionStartedResponse extends Message<AckTestExecutionStartedResponse> {
  constructor(data?: PartialMessage<AckTestExecutionStartedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckTestExecutionStartedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckTestExecutionStartedResponse {
    return new AckTestExecutionStartedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckTestExecutionStartedResponse {
    return new AckTestExecutionStartedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckTestExecutionStartedResponse {
    return new AckTestExecutionStartedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AckTestExecutionStartedResponse | PlainMessage<AckTestExecutionStartedResponse> | undefined, b: AckTestExecutionStartedResponse | PlainMessage<AckTestExecutionStartedResponse> | undefined): boolean {
    return proto3.util.equals(AckTestExecutionStartedResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckTestExecutionFinishedRequest
 */
export class AckTestExecutionFinishedRequest extends Message<AckTestExecutionFinishedRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  /**
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;

  /**
   * @generated from field: optional string error = 4;
   */
  error?: string;

  constructor(data?: PartialMessage<AckTestExecutionFinishedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckTestExecutionFinishedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "finish_time", kind: "message", T: Timestamp },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckTestExecutionFinishedRequest {
    return new AckTestExecutionFinishedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckTestExecutionFinishedRequest {
    return new AckTestExecutionFinishedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckTestExecutionFinishedRequest {
    return new AckTestExecutionFinishedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AckTestExecutionFinishedRequest | PlainMessage<AckTestExecutionFinishedRequest> | undefined, b: AckTestExecutionFinishedRequest | PlainMessage<AckTestExecutionFinishedRequest> | undefined): boolean {
    return proto3.util.equals(AckTestExecutionFinishedRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckTestExecutionFinishedResponse
 */
export class AckTestExecutionFinishedResponse extends Message<AckTestExecutionFinishedResponse> {
  constructor(data?: PartialMessage<AckTestExecutionFinishedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckTestExecutionFinishedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckTestExecutionFinishedResponse {
    return new AckTestExecutionFinishedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckTestExecutionFinishedResponse {
    return new AckTestExecutionFinishedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckTestExecutionFinishedResponse {
    return new AckTestExecutionFinishedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AckTestExecutionFinishedResponse | PlainMessage<AckTestExecutionFinishedResponse> | undefined, b: AckTestExecutionFinishedResponse | PlainMessage<AckTestExecutionFinishedResponse> | undefined): boolean {
    return proto3.util.equals(AckTestExecutionFinishedResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckCaseExecutionScheduledRequest
 */
export class AckCaseExecutionScheduledRequest extends Message<AckCaseExecutionScheduledRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  /**
   * @generated from field: int32 case_execution_id = 3;
   */
  caseExecutionId = 0;

  /**
   * @generated from field: string case_name = 4;
   */
  caseName = "";

  /**
   * @generated from field: google.protobuf.Timestamp schedule_time = 5;
   */
  scheduleTime?: Timestamp;

  constructor(data?: PartialMessage<AckCaseExecutionScheduledRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckCaseExecutionScheduledRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "case_execution_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "case_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "schedule_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckCaseExecutionScheduledRequest {
    return new AckCaseExecutionScheduledRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckCaseExecutionScheduledRequest {
    return new AckCaseExecutionScheduledRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckCaseExecutionScheduledRequest {
    return new AckCaseExecutionScheduledRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AckCaseExecutionScheduledRequest | PlainMessage<AckCaseExecutionScheduledRequest> | undefined, b: AckCaseExecutionScheduledRequest | PlainMessage<AckCaseExecutionScheduledRequest> | undefined): boolean {
    return proto3.util.equals(AckCaseExecutionScheduledRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckCaseExecutionScheduledResponse
 */
export class AckCaseExecutionScheduledResponse extends Message<AckCaseExecutionScheduledResponse> {
  constructor(data?: PartialMessage<AckCaseExecutionScheduledResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckCaseExecutionScheduledResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckCaseExecutionScheduledResponse {
    return new AckCaseExecutionScheduledResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckCaseExecutionScheduledResponse {
    return new AckCaseExecutionScheduledResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckCaseExecutionScheduledResponse {
    return new AckCaseExecutionScheduledResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AckCaseExecutionScheduledResponse | PlainMessage<AckCaseExecutionScheduledResponse> | undefined, b: AckCaseExecutionScheduledResponse | PlainMessage<AckCaseExecutionScheduledResponse> | undefined): boolean {
    return proto3.util.equals(AckCaseExecutionScheduledResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckCaseExecutionStartedRequest
 */
export class AckCaseExecutionStartedRequest extends Message<AckCaseExecutionStartedRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  /**
   * @generated from field: int32 case_execution_id = 3;
   */
  caseExecutionId = 0;

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  constructor(data?: PartialMessage<AckCaseExecutionStartedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckCaseExecutionStartedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "case_execution_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckCaseExecutionStartedRequest {
    return new AckCaseExecutionStartedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckCaseExecutionStartedRequest {
    return new AckCaseExecutionStartedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckCaseExecutionStartedRequest {
    return new AckCaseExecutionStartedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AckCaseExecutionStartedRequest | PlainMessage<AckCaseExecutionStartedRequest> | undefined, b: AckCaseExecutionStartedRequest | PlainMessage<AckCaseExecutionStartedRequest> | undefined): boolean {
    return proto3.util.equals(AckCaseExecutionStartedRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckCaseExecutionStartedResponse
 */
export class AckCaseExecutionStartedResponse extends Message<AckCaseExecutionStartedResponse> {
  constructor(data?: PartialMessage<AckCaseExecutionStartedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckCaseExecutionStartedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckCaseExecutionStartedResponse {
    return new AckCaseExecutionStartedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckCaseExecutionStartedResponse {
    return new AckCaseExecutionStartedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckCaseExecutionStartedResponse {
    return new AckCaseExecutionStartedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AckCaseExecutionStartedResponse | PlainMessage<AckCaseExecutionStartedResponse> | undefined, b: AckCaseExecutionStartedResponse | PlainMessage<AckCaseExecutionStartedResponse> | undefined): boolean {
    return proto3.util.equals(AckCaseExecutionStartedResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckCaseExecutionFinishedRequest
 */
export class AckCaseExecutionFinishedRequest extends Message<AckCaseExecutionFinishedRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  /**
   * @generated from field: int32 case_execution_id = 3;
   */
  caseExecutionId = 0;

  /**
   * @generated from field: google.protobuf.Timestamp finish_time = 4;
   */
  finishTime?: Timestamp;

  /**
   * @generated from field: optional string error = 5;
   */
  error?: string;

  constructor(data?: PartialMessage<AckCaseExecutionFinishedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckCaseExecutionFinishedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "case_execution_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "finish_time", kind: "message", T: Timestamp },
    { no: 5, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckCaseExecutionFinishedRequest {
    return new AckCaseExecutionFinishedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckCaseExecutionFinishedRequest {
    return new AckCaseExecutionFinishedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckCaseExecutionFinishedRequest {
    return new AckCaseExecutionFinishedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AckCaseExecutionFinishedRequest | PlainMessage<AckCaseExecutionFinishedRequest> | undefined, b: AckCaseExecutionFinishedRequest | PlainMessage<AckCaseExecutionFinishedRequest> | undefined): boolean {
    return proto3.util.equals(AckCaseExecutionFinishedRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.AckCaseExecutionFinishedResponse
 */
export class AckCaseExecutionFinishedResponse extends Message<AckCaseExecutionFinishedResponse> {
  constructor(data?: PartialMessage<AckCaseExecutionFinishedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.AckCaseExecutionFinishedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckCaseExecutionFinishedResponse {
    return new AckCaseExecutionFinishedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckCaseExecutionFinishedResponse {
    return new AckCaseExecutionFinishedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckCaseExecutionFinishedResponse {
    return new AckCaseExecutionFinishedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AckCaseExecutionFinishedResponse | PlainMessage<AckCaseExecutionFinishedResponse> | undefined, b: AckCaseExecutionFinishedResponse | PlainMessage<AckCaseExecutionFinishedResponse> | undefined): boolean {
    return proto3.util.equals(AckCaseExecutionFinishedResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.PublishTestExecutionLogRequest
 */
export class PublishTestExecutionLogRequest extends Message<PublishTestExecutionLogRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  /**
   * @generated from field: optional int32 case_execution_id = 3;
   */
  caseExecutionId?: number;

  /**
   * @generated from field: string level = 4;
   */
  level = "";

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  constructor(data?: PartialMessage<PublishTestExecutionLogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.PublishTestExecutionLogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "case_execution_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "level", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "create_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishTestExecutionLogRequest {
    return new PublishTestExecutionLogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishTestExecutionLogRequest {
    return new PublishTestExecutionLogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishTestExecutionLogRequest {
    return new PublishTestExecutionLogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishTestExecutionLogRequest | PlainMessage<PublishTestExecutionLogRequest> | undefined, b: PublishTestExecutionLogRequest | PlainMessage<PublishTestExecutionLogRequest> | undefined): boolean {
    return proto3.util.equals(PublishTestExecutionLogRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.PublishTestExecutionLogResponse
 */
export class PublishTestExecutionLogResponse extends Message<PublishTestExecutionLogResponse> {
  /**
   * @generated from field: string log_id = 1;
   */
  logId = "";

  constructor(data?: PartialMessage<PublishTestExecutionLogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.PublishTestExecutionLogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishTestExecutionLogResponse {
    return new PublishTestExecutionLogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishTestExecutionLogResponse {
    return new PublishTestExecutionLogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishTestExecutionLogResponse {
    return new PublishTestExecutionLogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishTestExecutionLogResponse | PlainMessage<PublishTestExecutionLogResponse> | undefined, b: PublishTestExecutionLogResponse | PlainMessage<PublishTestExecutionLogResponse> | undefined): boolean {
    return proto3.util.equals(PublishTestExecutionLogResponse, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListTestExecutionLogsRequest
 */
export class ListTestExecutionLogsRequest extends Message<ListTestExecutionLogsRequest> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  constructor(data?: PartialMessage<ListTestExecutionLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListTestExecutionLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestExecutionLogsRequest {
    return new ListTestExecutionLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestExecutionLogsRequest {
    return new ListTestExecutionLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestExecutionLogsRequest {
    return new ListTestExecutionLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestExecutionLogsRequest | PlainMessage<ListTestExecutionLogsRequest> | undefined, b: ListTestExecutionLogsRequest | PlainMessage<ListTestExecutionLogsRequest> | undefined): boolean {
    return proto3.util.equals(ListTestExecutionLogsRequest, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.ListTestExecutionLogsResponse
 */
export class ListTestExecutionLogsResponse extends Message<ListTestExecutionLogsResponse> {
  /**
   * @generated from field: repeated annex.tests.v1.Log logs = 1;
   */
  logs: Log[] = [];

  constructor(data?: PartialMessage<ListTestExecutionLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.ListTestExecutionLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: Log, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTestExecutionLogsResponse {
    return new ListTestExecutionLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTestExecutionLogsResponse {
    return new ListTestExecutionLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTestExecutionLogsResponse {
    return new ListTestExecutionLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTestExecutionLogsResponse | PlainMessage<ListTestExecutionLogsResponse> | undefined, b: ListTestExecutionLogsResponse | PlainMessage<ListTestExecutionLogsResponse> | undefined): boolean {
    return proto3.util.equals(ListTestExecutionLogsResponse, a, b);
  }
}

